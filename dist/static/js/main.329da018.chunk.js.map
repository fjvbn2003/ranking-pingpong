{"version":3,"sources":["components/layout/SignedInLinks.js","store/actions/authActions.js","components/layout/SignedOutLinks.js","components/layout/Navbar.js","components/dashboard/Notifications.js","components/rankings/TotalRanking.js","components/dashboard/Dashboard.js","components/games/GameDetails.js","components/auth/SignIn.js","components/auth/SignUp.js","components/games/GameSummary.js","components/games/CreateGame.js","store/actions/gameActions.js","components/games/GameList.js","components/history/History.js","components/profile/Profile.js","App.js","serviceWorker.js","store/reducers/authReducer.js","store/reducers/gameReducer.js","store/reducers/rootReducer.js","config/fbConfig.js","index.js"],"names":["connect","dispatch","signOut","getState","_ref2","getFirebase","auth","then","type","props","profile","react_default","a","createElement","id","className","NavLink","to","onClick","Link","initial","SignedOutLinks","state","firebase","links","uid","components_layout_SignedInLinks","layout_SignedOutLinks","Notifications","notifications","map","item","game_id","key","content","result","moment","time","toDate","fromNow","user_id","TotalRankings","users","index","name","club","rating","Dashboard","_this$props","this","rankings_TotalRanking","dashboard_Notifications","Redirect","Component","compose","firestore","ordered","firestoreConnect","collection","limit","orderBy","ownProps","match","params","games","data","game","console","log","p1_score","p2_score","p1_id","p1_name","p2_id","p2_name","location","referee_name","createdAt","calendar","SignIn","email","password","handleChange","e","_this","setState","Object","defineProperty","target","value","handleSubmit","preventDefault","signIn","authError","authErrorMessage","onSubmit","htmlFor","onChange","creds","credentials","_ref","signInWithEmailAndPassword","catch","err","SignUp","level","signUp","newUser","_ref3","getFirestore","createUserWithEmailAndPassword","resp","doc","user","set","GameSummary","options","loadOptions1","inputValue","callback","setTimeout","filterNames","loadOptions2","filter","i","label","includes","CreateGame","referee","date","selectedOption1","selectedOption2","handleChange1","selectedOption","handleChange2","createGame","history","push","handleInputChange1","newValue","handleInputChange2","length","pop","forEach","element","concat","defaultValue","Async_default","loadOptions","defaultOptions","cacheOptions","onInputChange","isSearchable","referee_id","add","objectSpread","whowin","Date","GameList","games_GameSummary","History","undefined","new_games","components_games_GameList","Profile","App","BrowserRouter","layout_Navbar","Switch","Route","exact","path","component","GameDetails","Histroy","Boolean","window","hostname","initState","authReducer","arguments","action","message","gameReducer","rootReducer","combineReducers","firestoreReducer","firebaseReducer","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","settings","timestampsInSnapshots","store","createStore","applyMiddleware","thunk","withExtraArgument","reduxFirestore","fbConfig","reactReduxFirebase","useFirestoreForProfile","userProfile","attachAuthIsReady","firebaseAuthIsReady","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.329da018.chunk.js","sourcesContent":["import React from 'react'\r\nimport {NavLink, Link} from 'react-router-dom'\r\nimport {connect} from 'react-redux'\r\nimport {signOut} from '../../store/actions/authActions'\r\nimport './SignedInLinks.css'\r\n\r\nconst SignedInLinks = (props) =>{\r\n    const {profile} = props;\r\n    return(\r\n        <div>\r\n            <ul id=\"nav-desktop\" className=\"right hide-on-small-only\">\r\n                <li><NavLink to='/create'><i className=\"material-icons\">add</i></NavLink></li>\r\n                <li><NavLink to='/'>전광판</NavLink></li>\r\n                <li><NavLink to='/history'>전적</NavLink></li>\r\n                <li><a onClick={props.signOut}>로그아웃</a></li>\r\n                <li><Link to='/profile' className='btn btn-floating blue  lighten-2 btn-flat white-text'>{profile.initial}</Link></li>\r\n\r\n                \r\n            </ul>\r\n            <ul id=\"nav-mobile\" className=\"right hide-on-med-and-up\">\r\n                <li><NavLink to='/create' ><i className=\"material-icons\">add</i></NavLink></li>\r\n                <li><NavLink to='/'><i className=\"material-icons\">format_list_numbered</i></NavLink></li>\r\n                <li><NavLink to='/history'><i className=\"material-icons\">insert_chart_outlined</i></NavLink></li>\r\n                <li><a onClick={props.signOut}><i className=\"material-icons\">logout</i></a></li>\r\n                <li><Link to='/profile' className='btn btn-floating blue lighten-2 btn-flat white-text'>{profile.initial}</Link></li>\r\n\r\n\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\nconst mapDispatchToProps = (dispatch) =>{\r\n    return{\r\n        signOut: () => dispatch(signOut())\r\n    }\r\n}\r\n\r\nexport default connect(null,mapDispatchToProps)(SignedInLinks);","export const signIn = (credentials) =>{\r\n    return (dispatch, getState, {getFirebase}) =>{\r\n        const firebase = getFirebase();\r\n        //로그인 요청\r\n        firebase.auth().signInWithEmailAndPassword(\r\n            credentials.email,\r\n            credentials.password,\r\n        ).then(()=>{\r\n            dispatch({type: 'LOGIN_SUCCESS'})\r\n        }).catch((err)=>{\r\n            dispatch({type: 'LOGIN_ERROR',err})\r\n        });\r\n\r\n    }\r\n}\r\n\r\nexport const signOut =  () =>{\r\n    return (dispatch, getState, {getFirebase}) =>{\r\n        const firebase = getFirebase();\r\n        firebase.auth().signOut().then(()=>{\r\n            dispatch({type: 'LOGOUT_SUCCESS'});\r\n        })\r\n    }\r\n}\r\n\r\nexport const signUp = (newUser) =>{\r\n    return (dispatch, getState, {getFirebase, getFirestore}) =>{\r\n        const firebase = getFirebase();\r\n        const firestore = getFirestore();\r\n\r\n        firebase.auth().createUserWithEmailAndPassword(\r\n            newUser.email,\r\n            newUser.password\r\n        ).then((resp)=>{\r\n            //add()는 doc을 추가하면서 key값을 firestore에서 자동으로 할당하는 것, doc()은 id를 직접 지정하는것\r\n            return firestore.collection('users').doc(resp.user.uid).set({\r\n                name: newUser.name,\r\n                level: newUser.level,\r\n                club: newUser.club,\r\n                initial: newUser.name[1],\r\n                email: newUser.email,\r\n                rating: 6000 - newUser.level*1000\r\n            })\r\n        }).then(()=>{\r\n            dispatch({type: 'SIGNUP_SUCCESS'});\r\n        }).catch( err =>{\r\n            dispatch({type: 'SIGNUP_ERROR',err})\r\n        });\r\n  \r\n    }\r\n\r\n}","import React from 'react'\r\nimport {NavLink} from 'react-router-dom'\r\nconst SignedOutLinks = () =>{\r\n    return(\r\n        <div>\r\n            <ul id=\"nav-desktop\" className=\"right hide-on-small-only\">\r\n                <li><NavLink to='/'>전광판</NavLink></li>\r\n                <li><NavLink to='/signin'>로그인</NavLink></li>\r\n                <li><NavLink to='/signup'>회원가입</NavLink></li>\r\n\r\n            </ul>\r\n            <ul id=\"nav-mobile\" className=\"right hide-on-med-and-up\">\r\n                <li><NavLink to='/'><i className=\"material-icons\">dashboard</i></NavLink></li>\r\n                <li><NavLink to='/signin'>로그인</NavLink></li>\r\n                <li><NavLink to='/signup'>회원가입</NavLink></li>\r\n\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SignedOutLinks;","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport SignedInLinks from './SignedInLinks';\r\nimport SignedOutLinks from './SignedOutLinks';\r\nimport {connect} from 'react-redux'\r\n\r\nconst Navbar = (props) =>{\r\n    const {auth, profile} = props;\r\n    //console.log(auth);\r\n    const links = auth.uid ? <SignedInLinks profile={profile}/> :<SignedOutLinks/>;\r\n    return(\r\n        <nav className=\"nav wrapper blue darken-2 z-depth-0\">\r\n            <div className=\"container\">\r\n                <Link to='/' className=\"brand-logo left\"><span className=\"white-text\">랭킹핑퐁</span></Link>\r\n                {links}\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\nconst mapStateToProps = (state) =>{\r\n    //console.log(state);\r\n    return{\r\n        auth: state.firebase.auth,\r\n        profile: state.firebase.profile,\r\n    }\r\n}\r\nexport default connect(mapStateToProps)(Navbar); ","import React from 'react'\r\nimport moment from 'moment'\r\nimport {Link} from 'react-router-dom'\r\n\r\nconst Notifications = (props) =>{\r\n    const {notifications} = props;\r\n    return (\r\n        <div className=\"section\">\r\n            <div className=\"card z-depth-0\">\r\n                <div className=\"card-content\">\r\n                    <span className=\"card-title\">Notifications</span>\r\n                    <ul className=\"notifications\">\r\n                        {notifications && notifications.map( item =>{\r\n                            //notification type\r\n                            //new user\r\n                            if(item.type == 'new_game'){\r\n                                \r\n                                return(\r\n                                <Link to={'/game/'+item.game_id}  key={item.id}>\r\n                                    <li>\r\n                                        <p className=\"pink-text\">{item.content}</p>\r\n                                        <p>{item.result}</p>\r\n                                        <div className=\"grey-text note-date\">\r\n                                            {moment(item.time.toDate()).fromNow()}\r\n                                        </div>\r\n                                    </li>\r\n                                </Link>\r\n                                )\r\n                            }else if(item.type == 'new_user'){\r\n                                return(\r\n                                <Link to={'/history/'+item.user_id}  key={item.id}>\r\n                                    <li>\r\n                                        <p className=\"pink-text\">{item.content}</p>\r\n                                        <p>{item.result}</p>\r\n                                        <div className=\"grey-text note-date\">\r\n                                            {moment(item.time.toDate()).fromNow()}\r\n                                        </div>\r\n                                    </li>\r\n                                </Link>\r\n                                )\r\n                            }\r\n                            //지정된 타입이 아닐 때\r\n                            else{\r\n\r\n                            }\r\n\r\n                        })}\r\n\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\nexport default Notifications;","import React from 'react'\r\nimport {Link} from 'react-router-dom'\r\nimport './TotalRanking.css'\r\n// Dashboard에서 전달된 rankings 데이터를 받아온다.\r\nconst TotalRankings = (props) =>{\r\n    const {users} = props;\r\n    //console.log(users);\r\n    return(\r\n        <table className=\"highlight centered\">\r\n            <thead>\r\n            <tr>\r\n                <th>순위</th>\r\n                <th>이름</th>\r\n                <th>구장</th>\r\n                <th>레이팅</th>\r\n                \r\n            </tr>\r\n            </thead>\r\n\r\n            <tbody>\r\n                {users && users.map((item, index) =>{\r\n                    return(\r\n                        <tr key={item.id}>\r\n                            <th>{index+1}</th>\r\n                                <td>\r\n                                <Link to={'/history/'+item.id}>{item.name}</Link></td>\r\n                            <td>{item.club}</td>\r\n                            <td>{item.rating}</td>\r\n                        </tr>\r\n                    )\r\n                })}\r\n\r\n            </tbody>\r\n      </table>\r\n            \r\n    )\r\n\r\n}\r\n\r\nexport default TotalRankings;","import React, {Component} from 'react'\r\nimport Notifications from './Notifications'\r\n// app.js에 store객체로 저장된 store리덕스에 접근하기 위해서 필요한 connect 함수\r\n// Dashboard에서 데이터에 접근해서 gameList에 뿌려줘야 한다. 왜냐하면 list를 뿌려주는 것은 클래스 컴포넌트가 아니고 함수형이기 때문이다. 복잡한건 클래스 컴포넌트에서 모두 해야한다.\r\nimport {connect} from 'react-redux'\r\nimport {firestoreConnect} from 'react-redux-firebase'\r\nimport {compose} from 'redux'\r\nimport {Redirect} from 'react-router-dom'\r\nimport TotalRankings from '../rankings/TotalRanking';\r\n// 데이터를 가져오려면 Async(비동기적 방식)으로 데이터베이스에 접근해야한다. 그렇게 하기 위해서는 컴포넌트의 생명주기를 적절히 이용하여 네트워크로 인한 데이터 로딩시간을 적절하게 줄일 필요가 있다.\r\n\r\n\r\nclass Dashboard extends  Component {\r\n    render(){\r\n\r\n        const { auth, notifications,users} = this.props;\r\n        // route guarding\r\n        if(!auth.uid) return <Redirect to='/signin'/>\r\n\r\n        return(\r\n        <div className=\"dashboard container\">\r\n            <h3 className='center-align'>전광판</h3>\r\n            <div className=\"row\">\r\n                <div className=\"col s12 m6\">\r\n                    <TotalRankings users={users}/>\r\n                </div> \r\n                <div className=\"col s12 m5 offset-m1\">\r\n                    <Notifications notifications={notifications}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        )}\r\n\r\n}\r\n// store 리덕스에 접근해서 이를 Dashboard에 props로 넘겨주기위해 connect의 인자로 필요한 함수.(이름도 미리 정해져 있음)\r\nconst mapStateToProps = (state) =>{\r\n    //여기서 state는 redux의 state이다.\r\n    //console.log(state); state객체에는 redux에 등록된 reducer들과 그 상태가 들어있음.\r\n\r\n    return{\r\n        auth: state.firebase.auth,\r\n        notifications: state.firestore.ordered.notifications,\r\n        users: state.firestore.ordered.users,\r\n        \r\n    }\r\n}\r\n\r\n\r\nexport default compose(\r\n    connect(mapStateToProps),\r\n    firestoreConnect([\r\n        // 어떤 collection을 연결할지 설정        \r\n        {collection: 'notifications', limit:10, orderBy:['time','desc']},\r\n        {collection: 'users', orderBy:['rating','desc']},\r\n    ])\r\n)(Dashboard);","import React from 'react'\r\nimport {connect} from 'react-redux'\r\nimport {firestoreConnect} from 'react-redux-firebase'\r\nimport {compose} from 'redux'\r\nimport {Redirect} from 'react-router-dom'\r\nimport moment from 'moment'\r\nimport {Link} from 'react-router-dom'\r\n\r\nconst GameDetails = (props) =>{\r\n\r\n    const {game,auth,id} = props;\r\n    console.log(game);\r\n    if(!auth.uid) return <Redirect to='/signin'/>\r\n\r\n    if(game){\r\n        return (\r\n            <div className=\"container section game-details\">\r\n                <div className=\"card z-depth-0\">\r\n                    <div className=\"card-content\">\r\n                        <div className=\"card-title\">\r\n                            <div className=\"row center-align\">\r\n                                <h3 className=\"col s5 m5 l5\">{game.p1_score}</h3>\r\n                                <h3 className=\"col s2 m2 l2\">:</h3>                 \r\n                                <h3 className=\"col s5 m5 l5\">{game.p2_score}</h3>\r\n                            </div>\r\n                            <div className=\"row center-align\">\r\n                                <Link to={'/history/'+game.p1_id}>\r\n                                    <h6 className=\"col s5 m5 center-align\">{game.p1_name}</h6>\r\n                                </Link>\r\n                                <h6 className=\"col s2 m2 \"></h6>\r\n                                <Link to={'/history/'+game.p2_id}>\r\n                                    <h6 className=\"col s5 m5 center-align\">{game.p2_name}</h6> \r\n                                </Link>  \r\n                            </div>\r\n                        </div>\r\n                        <div className=\"card-action grey lighten-4 grey-text\">\r\n                            <div>게임번호: {id}</div>\r\n                            <div>탁구장 위치: {game.location}</div>\r\n                            <div>심판: {game.referee_name}</div>\r\n                            <div>{moment(game.createdAt.toDate()).calendar()}에 생성됨</div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }else{\r\n        return(\r\n            <div className=\"container center\">\r\n                <p>Loading project...</p>\r\n            </div>\r\n        )\r\n    }\r\n    \r\n\r\n}\r\n//ownProps를 이용하면 props에 접근이 가능하다.\r\nconst mapStateToProps = (state, ownProps) =>{\r\n    const id =  ownProps.match.params.id;\r\n    const games = state.firestore.data.games;\r\n    const game = games? games[id] : null;\r\n    return{\r\n        game: game,\r\n        auth: state.firebase.auth,\r\n        id: id\r\n\r\n    }\r\n}\r\nexport default compose(\r\n    connect(mapStateToProps),\r\n    firestoreConnect([\r\n        {collection:'games'}\r\n    ])\r\n)(GameDetails);","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport {signIn} from '../../store/actions/authActions'\r\nimport {Redirect} from 'react-router-dom'\r\nimport './SignIn.css'\r\nclass SignIn extends Component {\r\n\r\n    state={\r\n        email:'',\r\n        password:'',\r\n\r\n    }\r\n    handleChange = (e) =>{\r\n        this.setState({\r\n            [e.target.id]: e.target.value\r\n        })\r\n    }\r\n    handleSubmit = (e) =>{\r\n        e.preventDefault();\r\n        this.props.signIn(this.state)\r\n    }\r\n\r\n    render(){\r\n        const {authError,authErrorMessage,auth} = this.props;\r\n        if(auth.uid) return <Redirect to='/'/>\r\n        //console.log(authErrorMessage);\r\n\r\n        return(\r\n            <div className=\"signin container\">\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <div className=\"row\">\r\n                        <h5 className=\"grey-text text-darken-3 col s12\">로그인</h5>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"input-field col s12\">\r\n                            <label htmlFor=\"email\">이메일</label>\r\n                            <input type=\"email\" id=\"email\" onChange={this.handleChange}/>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"input-field col s12\">\r\n                            <label htmlFor=\"password\">패스워드</label>\r\n                            <input type=\"password\" id=\"password\" onChange={this.handleChange}/>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"input-field col s12\">\r\n                            <button className=\"btn blue darken-2\">로그인</button>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"red-text right col s12\">\r\n                            {authError ? <p>{authError}</p>:null}\r\n                        </div>\r\n                    </div>\r\n                        \r\n\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n// auth state에 접근하기 위한 코드\r\nconst mapStateToProps = (state) =>{\r\n    return{\r\n        authError: state.auth.authError,\r\n        auth: state.firebase.auth\r\n\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) =>{\r\n    return{\r\n        signIn: (creds)=>dispatch(signIn(creds)),\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SignIn);","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport {Redirect} from 'react-router-dom'\r\nimport {signUp} from '../../store/actions/authActions'\r\nimport './SignIn.css'\r\nclass SignUp extends Component {\r\n\r\n    state={\r\n        email:'',\r\n        password:'',\r\n        name:'',\r\n        level:'',\r\n        club:','\r\n\r\n    }\r\n    handleChange = (e) =>{\r\n        this.setState({\r\n            [e.target.id]: e.target.value\r\n        })\r\n    }\r\n    handleSubmit = (e) =>{\r\n        e.preventDefault();\r\n        //console.log(this.state);\r\n        this.props.signUp(this.state);\r\n    }\r\n\r\n    render(){\r\n        const {auth, authError} = this.props;\r\n        if(auth.uid) return <Redirect to='/'/>\r\n\r\n        return(\r\n            <div className=\"signup container\">\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <div className=\"row\">\r\n                        <h5 className=\"grey-text text-darken-3 col s12\">회원가입</h5>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"input-field\">\r\n                            <label htmlFor=\"name\">이름</label>\r\n                            <input type=\"text\" id=\"name\" onChange={this.handleChange}/>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"input-field\">\r\n                            <label htmlFor=\"email\">이메일</label>\r\n                            <input type=\"email\" id=\"email\" onChange={this.handleChange}/>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"input-field\">\r\n                            <label htmlFor=\"password\">패스워드</label>\r\n                            <input type=\"password\" id=\"password\" onChange={this.handleChange}/>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"input-field\">\r\n                            <label htmlFor=\"level\">부수</label>\r\n                            <input type=\"number\" id=\"level\" onChange={this.handleChange}/>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"input-field\">\r\n                            <label htmlFor=\"club\">탁구장</label>\r\n                            <input type=\"text\" id=\"club\" onChange={this.handleChange}/>\r\n                        </div>\r\n                    </div>\r\n                    \r\n                    <div className=\"row\">\r\n                        <div className=\"input-field\">\r\n                            <button className=\"btn blue darken-2\">회원가입</button>\r\n                        </div>    \r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"red-text center\">\r\n                                {authError ? <p>{authError}</p>: null }\r\n                        </div>\r\n                    </div>\r\n                    \r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = (state) =>{\r\n    return{\r\n        auth: state.firebase.auth,\r\n        authError: state.auth.authError\r\n\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch) =>{\r\n    return{\r\n        signUp: (newUser) => dispatch(signUp(newUser))\r\n    }\r\n}\r\nexport default connect(mapStateToProps,mapDispatchToProps)(SignUp);","import React from 'react'\r\nimport './GameList.css';\r\nimport moment from 'moment'\r\n\r\nconst GameSummary = ({game})=>{\r\n    return(\r\n        <div className=\"card  game-summary z-depth-1\">\r\n                <div className=\"card-content grey-text text-darken-3\">\r\n                    <div className=\"card-title\">\r\n                        <div className=\"row center-align\">\r\n                            <h3 className=\"col s5 m3 offset-m2 \">{game.p1_score}</h3>\r\n                            <h3 className=\"col s2 m0 \">:</h3>                 \r\n                            <h3 className=\"col s5 m3\">{game.p2_score}</h3>\r\n                        </div>\r\n                        <div className=\"row center-align\">\r\n                            <h6 className=\"col s5 m3 offset-m2 center-align\">{game.p1_name}</h6>\r\n                            <h6 className=\"col s2 m0 \"></h6>\r\n                            <h6 className=\"col s5 m3 center-align\">{game.p2_name}</h6>   \r\n                        </div>\r\n                    </div>    \r\n                    <p className=\"center-align\">{game.referee_name}에 의해 생성됨</p>\r\n                    <p className='grey-text center-align'>{moment(game.createdAt.toDate()).calendar()}</p>\r\n                </div>\r\n        </div>\r\n    )\r\n    \r\n}\r\nexport  default GameSummary;","import React, {Component} from 'react'\r\nimport {createGame} from '../../store/actions/gameActions'\r\nimport {connect} from 'react-redux'\r\nimport {Redirect} from 'react-router-dom'\r\nimport {firestoreConnect} from 'react-redux-firebase'\r\nimport {compose} from 'redux'\r\nimport AsyncSelect from 'react-select/lib/Async';\r\nimport './CreateGame.css'\r\n\r\nvar props_flag = true;\r\nvar   options=[\r\n];\r\n\r\nconst loadOptions1 = (inputValue, callback) => {\r\n    setTimeout(() => {\r\n        callback(filterNames(inputValue));\r\n    }, 1000);\r\n    console.log(\"loadOption1 is called\");\r\n  };\r\n  const loadOptions2 = (inputValue, callback) => {\r\n    setTimeout(() => {\r\n      callback(filterNames(inputValue));\r\n    }, 1000);\r\n    console.log(\"loadOption2 is called\");\r\n  };\r\n\r\n  const filterNames = (inputValue) => {\r\n    return options.filter(i =>\r\n      i.label.includes(inputValue)\r\n    );\r\n  };\r\n  \r\n\r\nclass CreateGame extends Component {\r\n\r\n    state={\r\n        p1_name:'',\r\n        p1_score:0,\r\n        p1_id:'',\r\n        p2_name:'',\r\n        p2_score:0,\r\n        p2_id:'',\r\n        referee:'',\r\n        date:'',\r\n        location:'',\r\n        selectedOption1: null,\r\n        selectedOption2: null,\r\n        inputValue: '',\r\n        users:[],\r\n    }\r\n\r\n\r\n    handleChange = (e) =>{\r\n        this.setState({\r\n            [e.target.id]: e.target.value\r\n        });\r\n        console.log(\"submit\",this.state);\r\n    }\r\n    handleChange1 = (selectedOption) => {\r\n        console.log(selectedOption);\r\n        this.setState({ p1_name: selectedOption.label, p1_id: selectedOption.value });\r\n    }\r\n    handleChange2 = (selectedOption) => {\r\n        this.setState({ p2_name: selectedOption.label, p2_id: selectedOption.value });\r\n    }\r\n     handleSubmit = (e) =>{\r\n        e.preventDefault();\r\n        console.log(this.state);\r\n        this.props.createGame(this.state);\r\n        this.props.history.push('/');\r\n    }\r\n\r\n\r\n    // componentWillReceiveProps(nextProps){\r\n    //     console.log(nextProps);\r\n    //     const {users} = nextProps;\r\n    //     if(users != null && props_flag){\r\n    //         users.forEach(element => {\r\n    //             options.push({value: element.id, label: element.name})\r\n    //         });\r\n    //         props_flag = false;\r\n    //     }\r\n    // }\r\n    handleInputChange1 = (newValue) => {\r\n        this.setState({ inputValue: newValue });\r\n        return newValue;\r\n      };\r\n      handleInputChange2 = (newValue) => {\r\n        this.setState({ inputValue: newValue });\r\n        return newValue;\r\n      };\r\n    \r\n\r\n    render(){\r\n        // Route Gaurding\r\n        const {auth,users} = this.props;\r\n        if(users != null){\r\n            while (options.length > 0) {\r\n                options.pop();\r\n            } \r\n            users.forEach(element => {\r\n                options.push({value: element.id, label: `${element.name}(${element.rating})`})\r\n            });\r\n        }\r\n\r\n\r\n        if(!auth.uid) return <Redirect to='/signin'/>\r\n        return(\r\n            <div className=\"container create-game\">\r\n                <h3 className='center-align'>경기 기록</h3>\r\n                <form onSubmit={this.handleSubmit} className=\"white\">\r\n                        <div className=\"row center-align valign-wrapper\">\r\n                             <div className=\"input-field col s5 m5 l5\">\r\n                                <select id=\"p1_score\" className=\"browser-default\" onChange={this.handleChange}>\r\n                                    <option value=\"0\" defaultValue>0</option>\r\n                                    <option value=\"1\">1</option>\r\n                                    <option value=\"2\">2</option>\r\n                                    <option value=\"3\">3</option>\r\n                                </select>\r\n                             </div>\r\n                            \r\n                            <h3 className=\"col s2 m2 l2\">:</h3>                 \r\n                            <div className=\"input-field col s5 m5 l5\">\r\n                                <select  id=\"p2_score\" className=\"browser-default\" onChange={this.handleChange}>\r\n                                    <option value=\"0\" defaultValue>0</option>\r\n                                    <option value=\"1\">1</option>\r\n                                    <option value=\"2\">2</option>\r\n                                    <option value=\"3\">3</option>\r\n                                </select>\r\n                             </div>\r\n                        </div>\r\n                        <div className=\"row center-align\">\r\n                            <div className=\"input-field col s5 m5 center-align\">\r\n                                <label htmlFor=\"p1_name\">player1</label>\r\n                                <AsyncSelect\r\n                                    loadOptions={loadOptions1}\r\n                                    defaultOptions\r\n                                    cacheOptions\r\n                                    onInputChange={this.handleInputChange1}\r\n                                    onChange={this.handleChange1}\r\n                                    isSearchable\r\n\r\n                                />\r\n                            </div>\r\n                            <h6 className=\"col s2 m2 \"></h6>\r\n                            <div className=\"input-field col s5 m5 center-align\">\r\n                                <label htmlFor=\"p2_name\">player2</label>\r\n                                <AsyncSelect\r\n                                    loadOptions={loadOptions2}\r\n                                    cacheOptions\r\n                                    defaultOptions\r\n                                    onInputChange={this.handleInputChange2}\r\n                                    onChange={this.handleChange2}\r\n                                    isSearchable\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                        <div className=\"input-field center-align col s12\">\r\n                            <button className=\"btn blue darken-2\">확인</button>\r\n                        </div>\r\n                        </div>\r\n                        \r\n                </form>\r\n \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) =>{\r\n    return{\r\n        auth: state.firebase.auth,\r\n        users: state.firestore.ordered.users,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch)=>{\r\n    return{\r\n        createGame: (game)=> dispatch(createGame(game))\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps,mapDispatchToProps),\r\n    firestoreConnect([\r\n        // 어떤 collection을 연결할지 설정        \r\n        { collection: 'users',orderBy:['name','asc']},\r\n    ])\r\n)(CreateGame);","import GameSummary from \"../../components/games/GameSummary\";\r\n\r\n// Normal Action Creator\r\n/*export const createGame = (game) =>{\r\n    return{\r\n        type: 'ADD_GAME',\r\n        game: game,\r\n    }\r\n}*/\r\n//using thunk\r\nexport const createGame = (game) =>{\r\n    return (dispatch, getState,{getFirebase, getFirestore})=>{\r\n        //make async call to database\r\n        const firestore = getFirestore();\r\n        const profile = getState().firebase.profile;\r\n        const referee_id = getState().firebase.auth.uid;\r\n        //async task\r\n        firestore.collection('games').add({\r\n            ...game,\r\n            whowin: false,\r\n            referee_id: referee_id,\r\n            referee_name: profile.name,\r\n            p1_id : game.p1_id,\r\n            p2_id : game.p2_id,\r\n            createdAt: new Date(), \r\n        }).then(() =>{\r\n            dispatch({ type:'CREATE_GAME',game,});\r\n        }).catch((err)=>{\r\n            dispatch({type:'CREATE_GAME_ERROR', err})\r\n        });\r\n        \r\n    }\r\n}","import React from 'react'\r\nimport GameSummary from './GameSummary'\r\nimport {Link} from 'react-router-dom'\r\nimport './GameList.css';\r\n// Dashboard에서 전달된 games 데이터를 받아온다.\r\nconst GameList = ({games}) =>{\r\n  \r\n        return(\r\n            <div className=\"game-list section\">\r\n    \r\n                {/* 배열을 순회하면서 맵핑시킨다. */}\r\n                {games && games.map(game=>{\r\n                    return (\r\n                        <Link to={'/game/'+game.id} key={game.id}>\r\n                            <GameSummary game={game} />\r\n                        </Link>\r\n                    )\r\n                })}\r\n            </div>\r\n        )\r\n    \r\n\r\n}\r\n\r\nexport default GameList;","import React, {Component} from 'react'\r\nimport GameList from '../games/GameList'\r\n// app.js에 store객체로 저장된 store리덕스에 접근하기 위해서 필요한 connect 함수\r\n// Dashboard에서 데이터에 접근해서 gameList에 뿌려줘야 한다. 왜냐하면 list를 뿌려주는 것은 클래스 컴포넌트가 아니고 함수형이기 때문이다. 복잡한건 클래스 컴포넌트에서 모두 해야한다.\r\nimport {connect} from 'react-redux'\r\nimport {firestoreConnect} from 'react-redux-firebase'\r\nimport {compose} from 'redux'\r\nimport {Redirect} from 'react-router-dom'\r\n// 데이터를 가져오려면 Async(비동기적 방식)으로 데이터베이스에 접근해야한다. 그렇게 하기 위해서는 컴포넌트의 생명주기를 적절히 이용하여 네트워크로 인한 데이터 로딩시간을 적절하게 줄일 필요가 있다.\r\n\r\n\r\nclass History extends  Component {\r\n    render(){\r\n\r\n        const {auth} = this.props;\r\n        // route guarding\r\n        if(!auth.uid) return <Redirect to='/signin'/>\r\n        var {user_id, games} = this.props;\r\n        console.log(games);\r\n        console.log(user_id);\r\n        if(user_id == undefined){\r\n            user_id = auth.uid;\r\n        }\r\n        var new_games = [];\r\n        if(games != undefined){\r\n            new_games = games.filter( item =>{\r\n                    return (item.p1_id == user_id || item.p2_id == user_id);\r\n                });\r\n        }\r\n        console.log(new_games);\r\n        if(new_games.length >0){\r\n            return(\r\n                <div className=\"history container\">\r\n                    <GameList games={new_games}/>\r\n                </div>\r\n                )\r\n        }else{\r\n            return(                \r\n            <div className=\"history container\">\r\n                <div className=\"row\">\r\n                    <div className=\"red-text center col s12\">\r\n                         <p>경기 정보가 없습니다.</p>\r\n                    </div>\r\n                 </div>\r\n            </div>\r\n            )\r\n        }\r\n\r\n \r\n    }\r\n}\r\n// store 리덕스에 접근해서 이를 Dashboard에 props로 넘겨주기위해 connect의 인자로 필요한 함수.(이름도 미리 정해져 있음)\r\nconst mapStateToProps = (state,ownProps) =>{\r\n    //여기서 state는 redux의 state이다.\r\n    //console.log(state); state객체에는 redux에 등록된 reducer들과 그 상태가 들어있음.\r\n    const user_id =  ownProps.match.params.id;\r\n    return{\r\n        games: state.firestore.ordered.games,\r\n        auth: state.firebase.auth,\r\n        user_id: user_id,\r\n    }\r\n}\r\n\r\n\r\nexport default compose(\r\n    connect(mapStateToProps),\r\n    firestoreConnect([\r\n        // 어떤 collection을 연결할지 설정        \r\n        { collection: 'games',\r\n        orderBy:['createdAt','desc']},\r\n    ])\r\n)(History);","import React, {Component} from 'react'\r\n// app.js에 store객체로 저장된 store리덕스에 접근하기 위해서 필요한 connect 함수\r\n// Dashboard에서 데이터에 접근해서 gameList에 뿌려줘야 한다. 왜냐하면 list를 뿌려주는 것은 클래스 컴포넌트가 아니고 함수형이기 때문이다. 복잡한건 클래스 컴포넌트에서 모두 해야한다.\r\nimport {connect} from 'react-redux'\r\nimport {firestoreConnect} from 'react-redux-firebase'\r\nimport {Redirect} from 'react-router-dom'\r\n// 데이터를 가져오려면 Async(비동기적 방식)으로 데이터베이스에 접근해야한다. 그렇게 하기 위해서는 컴포넌트의 생명주기를 적절히 이용하여 네트워크로 인한 데이터 로딩시간을 적절하게 줄일 필요가 있다.\r\n\r\n\r\nclass Profile extends  Component {\r\n\r\n\r\n    render(){\r\n        const {auth} = this.props;\r\n        // route guarding\r\n        if(!auth.uid) return <Redirect to='/signin'/>\r\n        return(\r\n            <div className=\"profile container\">\r\n                <h2>프로필 창입니다</h2>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n// store 리덕스에 접근해서 이를 Dashboard에 props로 넘겨주기위해 connect의 인자로 필요한 함수.(이름도 미리 정해져 있음)\r\nconst mapStateToProps = (state) =>{\r\n    //여기서 state는 redux의 state이다.\r\n    //console.log(state); state객체에는 redux에 등록된 reducer들과 그 상태가 들어있음.\r\n    return{\r\n        auth: state.firebase.auth,\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps)(Profile);","import React, { Component } from 'react';\nimport {BrowserRouter, Switch, Route} from 'react-router-dom'\nimport Navbar from './components/layout/Navbar'\nimport Dashboard from './components/dashboard/Dashboard'\nimport GameDetails from './components/games/GameDetails'\nimport SignIn from './components/auth/SignIn';\nimport SignUp from './components/auth/SignUp';\nimport CreateGame from './components/games/CreateGame';\nimport Histroy from './components/history/History'\nimport Profile from './components/profile/Profile';\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <div className=\"App\">\n          <Navbar></Navbar>\n          <Switch>\n            <Route exact path='/' component={Dashboard}/>\n            <Route path='/game/:id' component={GameDetails}/>\n            <Route path='/signin' component={SignIn}/>\n            <Route path='/signup' component={SignUp}/>\n            <Route path='/create' component={CreateGame}/>\n            <Route exact path='/history' component={Histroy}/>\n            <Route path='/history/:id' component={Histroy}/>\n            <Route path='/profile' component={Profile}/>  \n          </Switch>          \n        </div>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initState = {\r\n    authError: null\r\n}\r\n\r\nconst authReducer = (state = initState, action) =>{\r\n\r\n    switch(action.type){\r\n        case 'LOGIN_ERROR':\r\n            return {\r\n                ...state,\r\n                authError: 'Login failed',\r\n                authErrorMessage: action.err\r\n            }\r\n        case 'LOGIN_SUCCESS':\r\n            console.log('login success');\r\n            return{\r\n                ...state,\r\n                authError: null,\r\n                authErrorMessage: null\r\n            }\r\n        case 'LOGOUT_SUCCESS':\r\n            console.log('signout success');\r\n            return state;\r\n        \r\n        case 'SIGNUP_SUCCESS':\r\n            console.log('signup success');\r\n            return{\r\n                ...state,\r\n                authError: null\r\n            }\r\n        case 'SIGNUP_ERROR':\r\n            console.log('signup error');\r\n            return{\r\n                ...state,\r\n                authError: action.err.message,\r\n            }\r\n\r\n        \r\n        default:\r\n            return state;        \r\n    }\r\n\r\n    \r\n}\r\n\r\nexport default authReducer;","const initState = {\r\n    games:[\r\n        {id:1, p1_score:3, p2_score:2, p1_name:'김영주', p2_name:'붕어빵'},\r\n        {id:2, p1_score:3, p2_score:0, p1_name:'고구마', p2_name:'감자'},\r\n        {id:3, p1_score:2, p2_score:3, p1_name:'감자', p2_name:'오이'},\r\n        {id:4, p1_score:1, p2_score:3, p1_name:'배추', p2_name:'당근'},\r\n\r\n    ]\r\n\r\n}\r\n\r\nconst gameReducer = (state = initState, action) =>{\r\n    switch(action.type){\r\n        case 'CREATE_GAME':\r\n            //console.log('created game', action.game);\r\n            return state;\r\n\r\n        case 'CREATE_GAME_ERROR':\r\n            //console.log('create game error', action.err)\r\n            return state\r\n        default:\r\n            return state;    \r\n    }\r\n    \r\n}\r\n\r\nexport default gameReducer;","import authReducer from './authReducer'\r\nimport gameReducer from './gameReducer'\r\nimport {combineReducers} from 'redux'\r\n// firestore와 redux를 동기화해주는 pre-made Reducer\r\nimport {firestoreReducer} from 'redux-firestore'\r\nimport {firebaseReducer} from 'react-redux-firebase'\r\n\r\n// 여러개의 리듀서를 하나의 루트 리듀서로 만든다.\r\n//firestore 리듀서는 store에 데이터가 바뀌면 자동으로 redux를 업데이트 한다.\r\n\r\nconst rootReducer = combineReducers({\r\n    auth: authReducer,\r\n    game: gameReducer,\r\n    firestore: firestoreReducer,\r\n    firebase: firebaseReducer\r\n});\r\n\r\nexport default rootReducer;","import firebase from 'firebase/app'\r\nimport 'firebase/firestore'\r\nimport 'firebase/auth'\r\n\r\n\r\n\r\n// Initialize Firebase\r\nvar config = {\r\n    apiKey: \"AIzaSyAlP6zYhvjzPIGsj2FYeYvLMw5D3IoqBMo\",\r\n    authDomain: \"react-rankpong.firebaseapp.com\",\r\n    databaseURL: \"https://react-rankpong.firebaseio.com\",\r\n    projectId: \"react-rankpong\",\r\n    storageBucket: \"react-rankpong.appspot.com\",\r\n    messagingSenderId: \"271586261523\"\r\n  };\r\n\r\n  \r\n  firebase.initializeApp(config);\r\n  firebase.firestore().settings({timestampsInSnapshots:true});\r\n\r\n  export default firebase;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {createStore, applyMiddleware, compose} from 'redux'\nimport rootReducer from './store/reducers/rootReducer'\n// store 객체를 App.js에 전달해주기 위해서 react-redux의 Provider 라는 glue 객체\nimport {Provider} from 'react-redux'\n//redux thunk는 dispatch를 하였을 때 비동기 방식으로 데이터를 가져온 뒤에 리듀서를 호출하기 위해 필요한 미들웨어 라이브러리이다.\nimport thunk from 'redux-thunk'\n// redux-firestore는 firestore와 redux, react-redux-firebase는 firebase전체와 redux를 위한 라이브러리\nimport {reduxFirestore, getFirestore} from 'redux-firestore'\nimport {reactReduxFirebase,getFirebase} from 'react-redux-firebase'\nimport fbConfig from './config/fbConfig'\n\n\n//create rootReducer, thunk에 extra 데이터로 getFirestore와 getFirebase를 전달\nconst store = createStore(rootReducer,\n    //여러개의 enhancer를 묶기위한 compose 함수\n    compose(\n        //return enhancer\n        applyMiddleware(thunk.withExtraArgument({getFirebase,getFirestore})),\n        // config file을 넣어주어서 actionCreator가 firebase와 저장소에 접근할 수 있도록 한다.\n        reduxFirestore(fbConfig),\n        // firebase가 인증을 완료했을 때 attach를 하여 렌더링을 하기 위해서 . attachAuthIsReady : ture 옵션을 넘겨준다., firestore에 있는 profile을  firebase에 auth와 sync 한다. userProfile에 profile이 담길 doc이름을 value로 지정한다.\n        // firebase.profile과 firestore.user과 연동을 위한 옵션\n        reactReduxFirebase(fbConfig,{useFirestoreForProfile:true, userProfile:'users', attachAuthIsReady:true})\n        )\n    );\n\n// Don't render to the DOM until firebase is ready\nstore.firebaseAuthIsReady.then(()=>{\n    ReactDOM.render(<Provider store={store}><App /></Provider> , document.getElementById('root'));\n\n    // If you want your app to work offline and load faster, you can change\n    // unregister() to register() below. Note this comes with some pitfalls.\n    // Learn more about service workers: http://bit.ly/CRA-PWA\n    serviceWorker.unregister();\n    \n}); \n"],"sourceRoot":""}